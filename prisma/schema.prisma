// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                   String   @id @default(cuid())
  url                  String
  email                String
  region               String?
  humanBrandStatement  String?  @db.Text
  createdBy            String?
  status               ProjectStatus @default(PENDING)
  progressMessage      String?  @default("Initializing...")
  progressPercent      Int?     @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  sources     Source[]
  llmRuns     LlmRun[]
  findings    Finding[]
  competitors Competitor[]
  reports     Report[]

  @@index([status])
  @@index([createdAt])
  @@index([email])

}

model Source {
  id           String   @id @default(cuid())
  projectId    String
  type         SourceType
  url          String
  contentHash  String?
  textExcerpt  String?  @db.Text
  fullContent  String?  @db.Text
  metadata     Json?
  createdAt    DateTime @default(now())

  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
}

model LlmRun {
  id          String   @id @default(cuid())
  projectId   String
  provider    LlmProvider
  model       String
  temperature Float?
  maxTokens   Int?
  settings    Json?
  rawResponse Json
  tokensUsed  Int?
  cost        Float?
  status      RunStatus @default(PENDING)
  error       String?
  createdAt   DateTime @default(now())

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  findings    Finding[]

  @@index([projectId])
  @@index([provider])
  @@index([status])
}

model Finding {
  id           String      @id @default(cuid())
  projectId    String
  llmRunId     String
  provider     LlmProvider
  kind         FindingKind
  value        Json
  evidenceRef  String?     @db.Text
  confidence   Float?
  createdAt    DateTime    @default(now())

  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  llmRun       LlmRun      @relation(fields: [llmRunId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([llmRunId])
  @@index([provider])
  @@index([kind])
  @@index([projectId, provider, kind])
}

model Competitor {
  id        String   @id @default(cuid())
  projectId String
  name      String
  url       String
  axisX     Float?
  axisY     Float?
  notes     String?  @db.Text
  metadata  Json?
  createdAt DateTime @default(now())

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Report {
  id         String   @id @default(cuid())
  projectId  String
  urlToken   String   @unique
  isPublic   Boolean  @default(false)
  version    Int      @default(1)
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiresAt  DateTime?

  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([urlToken])
}

enum ProjectStatus {
  PENDING
  SCRAPING
  ANALYZING
  COMPLETED
  FAILED
}

enum SourceType {
  MAIN_PAGE
  ABOUT
  HOMES
  AMENITIES
  LOCATION
  CONTACT
  PRESS
  OTHER
}

enum LlmProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
}

enum RunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum FindingKind {
  BRAND_SYNOPSIS
  POSITIONING_PILLAR
  TONE_OF_VOICE
  BUYER_SEGMENT
  AMENITY_CLAIM
  TRUST_SIGNAL
  RECOMMENDATION
  CLARITY_SCORE
  SPECIFICITY_SCORE
  DIFFERENTIATION_SCORE
  TRUST_SCORE
  // Real Estate Specific
  PRODUCT_MIX
  PRICE_POSITIONING
  COMPLIANCE_RISK
  LOCATION_DRIVER
  BUILDER_CREDIBILITY
}

enum Industry {
  RESIDENTIAL_REAL_ESTATE
  COMMERCIAL_REAL_ESTATE
  HEALTHCARE
  TECHNOLOGY
  FINANCIAL_SERVICES
  RETAIL
  HOSPITALITY
  MANUFACTURING
  EDUCATION
  PROFESSIONAL_SERVICES
  OTHER
}
